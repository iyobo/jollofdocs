[
{
	"uri": "http://docs.jollofjs.com/controllers/flow/",
	"title": "Flow",
	"tags": [],
	"description": "",
	"content": "Lorem Ipsum.\n"
},
{
	"uri": "http://docs.jollofjs.com/data/models/",
	"title": "Models",
	"tags": [],
	"description": "",
	"content": " Models are how you tell JollofJS how to structure your data.\nAll models for your app MUST be placed under apps/models\nLet\u0026rsquo;s look at the User model in there\nconst jollof = require('jollof'); const data = jollof.data; const types = data.types; const jql = data.jql; const schema = { name: 'User', dataSource: 'default', structure: { firstName: String, lastName: String, name: { type: String, meta: { disableEdit: true } }, email: types.Email(), password: { type: String, meta: { widget: 'password' } }, isAdmin: Boolean, accountType: { type: String, meta: { choices: [ 'normal', 'grand', 'epic' ] } } }, ... } module.exports = data.registerModel(schema);  If you have worked with ODMs like Mongoose, this should look familiar.\nStatic Methods To extend this model statically, define schema.statics. ex:\nschema.statics = { async countAllUsersWithFirstName(firstName){ //you have access to all models here via //jollof.models.AnyModel return await jollof.models.User.countBy({firstName}); } }  then you can call those from anywhere using await jollof.models.User.countAllUsers().\nInstance methods To extend a model instance, define schema.methods. ex:\nschema.methods = { async printFullName(){ //Again, you have access to all models here too via //jollof.models.AnyModel return this.firstName + ' '+this.lastName; } }  Notice how this gives you access to the actual instance of the model instance you are extending.\nYou can call a model instance method from a model. i.e\nconst user = jollof.models.User.findOneBy({email: 'foo@bar.com'}) ... //assuming user is not null const fullName = user.printFullName() console.log(fullName)  "
},
{
	"uri": "http://docs.jollofjs.com/basics/",
	"title": "Basics",
	"tags": [],
	"description": "",
	"content": " Chapter 1 Basics Get introduced to the JollofJS framework.\n"
},
{
	"uri": "http://docs.jollofjs.com/",
	"title": "Home",
	"tags": [],
	"description": "",
	"content": " Welcome to the JollofJS Docs Get introduced to the JollofJS framework.\nGet started\n"
},
{
	"uri": "http://docs.jollofjs.com/basics/introduction/",
	"title": "Introduction",
	"tags": [],
	"description": "",
	"content": " What is JollofJS JollofJS is a futuristic NodeJS web framework and Content management system.\nThe Higlights:\n Built-in Admin User Interface Ever wondered why something like Django Admin doesn\u0026rsquo;t exist for NodeJS? Well with JollofJS, it does now. Administer your site\u0026rsquo;s data with the built-in Jollof Admin (built from scratch using React). E.g You could whip up a blog for your Application and use Jollof Admin as a simple CMS backend for that blog. The options are endless!   Full support for ES8+ features i.e. Async/Await\n Environmental Configuration Tree. JollofJS has a custom-built config system that makes it easy to have different configurations per node.ENV. Base configuration can easily be overwritten by environmental configs (i.e. development, test, production, etc).\n Convention AND configuration. JollofJs starts you off with very good configurations that serve as awesome conventions for your web apps.\n  And more!\n"
},
{
	"uri": "http://docs.jollofjs.com/configuration/settings/",
	"title": "Settings",
	"tags": [],
	"description": "",
	"content": "Lorem Ipsum.\n"
},
{
	"uri": "http://docs.jollofjs.com/data/fields/",
	"title": "Fields",
	"tags": [],
	"description": "",
	"content": " Generic Field Definition Examples To define a field: someString: String or someString: {type: String}\nTo define a required field: someString: {type: String, required: true}\nTo define a String field that should be inputed with a textarea in the admin: someString: {type: String, meta:{ widget: 'textarea'} }\nAll Default Javascript primitive types are supported as field types i.e String, Number, Boolean, Date.\nOther Special Fields When defining a field, Besides the Javascript primitive types, Jollof supports special field types.\nIf you looked at the user model, You should see the email field defined using one of such special Field types.\n const types = data.types; const schema = { ... structure: { ... email: types.Email(), ... }, ... }  The special field types are listed below:\nEmail somefield: types.Email(),\nfor required: somefield: types.Email({required: true}),\nTextarea somefield: types.Textarea(), (prefferred) or somefield: {type: String, widget: 'textarea' }\nfor required: somefield: types.Textarea({required: true}),\nRichText This gives you a nice WYSIWYG HTML editor to work with in the admin for this field.\nsomefield: types.RichText(),\nfor required: somefield: types.RichText({required: true}),\nFile Use to upload a single file. somefield: types.File()\nThe structure this takes in the database is that of a HTML5 file object.\nLocation Use to represent a location. The widget used in the admin for this field is a map with a draggable pointer (set long/lat) with place search and address field entry.\nsomeLocation: types.Location()\nCollections A field can also be an array or object of any combination of other fields. ex:\nA string array: tags: [String] or tags: [{type: String}] An array of file fields: files: [ types.File() ] An array of locations: geoBreadCrumb: [types.Location()]\nHere\u0026rsquo;s an object with a string and a location\ngeoMessage: { text: String, location: types.Location() }  And of-course, you can make an array out of that too!\ngeoMessages: [{ text: String, location: types.Location() }]  The possibilities are endless. Enjoy what it feels like to have Total schema freedom and an admin UI that intelligently keep up with your imagination/structure.\n"
},
{
	"uri": "http://docs.jollofjs.com/data/",
	"title": "Data",
	"tags": [],
	"description": "",
	"content": " Chapter 2 Data "
},
{
	"uri": "http://docs.jollofjs.com/data/queries/",
	"title": "Queries",
	"tags": [],
	"description": "",
	"content": "How to\n"
},
{
	"uri": "http://docs.jollofjs.com/controllers/",
	"title": "Controllers",
	"tags": [],
	"description": "",
	"content": " Chapter 3 Controllers Lorem Ipsum.\n"
},
{
	"uri": "http://docs.jollofjs.com/views/",
	"title": "Views",
	"tags": [],
	"description": "",
	"content": " Chapter 4 Views Lorem Ipsum.\n"
},
{
	"uri": "http://docs.jollofjs.com/controllers/routes/",
	"title": "Routes",
	"tags": [],
	"description": "",
	"content": "Lorem Ipsum.\n"
},
{
	"uri": "http://docs.jollofjs.com/configuration/deploying/",
	"title": "Deploying",
	"tags": [],
	"description": "",
	"content": "Lorem Ipsum.\n"
},
{
	"uri": "http://docs.jollofjs.com/configuration/environments/",
	"title": "Environments",
	"tags": [],
	"description": "",
	"content": "Lorem Ipsum.\n"
},
{
	"uri": "http://docs.jollofjs.com/views/nunjucks/",
	"title": "Nunjucks",
	"tags": [],
	"description": "",
	"content": "Lorem Ipsum.\n"
},
{
	"uri": "http://docs.jollofjs.com/basics/requirements/",
	"title": "Requirements",
	"tags": [],
	"description": "",
	"content": " NodeJS v8+ NPM v4 is recommended. (npm v5 comes with node 8, but has too many bugs as at the time of this writing) Mongodb as default DB. Install and run it Redis for sessions. Install and run it.  "
},
{
	"uri": "http://docs.jollofjs.com/basics/getting-started/",
	"title": "Getting Started",
	"tags": [],
	"description": "",
	"content": "First install the Jollof global cli\nnpm i -g jollofjs  You also need to have mongoDB and Redis up and running.\nCreate your JollofJS app with:\njollof new myApp  Before you run your app, create an admin user:\ncd myApp jollof run createAdmin test@test.com password  This runs the jollof command in createAdmin.js, which exists in the commands/ directory in your project.\nNow you are ready to run your jollof app:\nnpm start  You should now be able to see jollof running at localhost:3001.\nAt this point, if you are u for a challenge, look through and explore your project files to get a mind of how a typical JollofJS project works.\n"
},
{
	"uri": "http://docs.jollofjs.com/configuration/",
	"title": "Configuration",
	"tags": [],
	"description": "",
	"content": " Chapter 5 Configuration Lorem Ipsum.\n"
},
{
	"uri": "http://docs.jollofjs.com/admin/",
	"title": "Admin Interface",
	"tags": [],
	"description": "",
	"content": " Chapter 6 The Admin Interface "
},
{
	"uri": "http://docs.jollofjs.com/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://docs.jollofjs.com/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]